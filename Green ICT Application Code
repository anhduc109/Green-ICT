using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using MySql.Data.MySqlClient;

namespace DatabaseTest
{
    public static class Global
    {
        public static DatabaseConnectors database = new DatabaseConnectors("green_ict_application");
        public static InformationSchema informationSchema = new InformationSchema();
    }
    public class DatabaseConnectors
    {
        private string myConnectionString;
        private MySqlConnection connection;
        private MySqlCommand command;

        public DatabaseConnectors(string databaseName)
        {
            myConnectionString = "Server=localhost;Database=" + databaseName + ";Uid=Tom2lua;Pwd=Hexastudio123;";
            connection = new MySqlConnection(myConnectionString);
            command = connection.CreateCommand();
        }
        public void OpenConnection()
        {
            try
            {
                connection.Open();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public void CloseConnection()
        {
            connection.Close();
        }
        private string WhereCheck(string text, string whereStatement)
        {
            if (whereStatement != null)
            {
                text += " WHERE " + whereStatement;
            }
            return text;
        }
        private string SelectCommand(string type, string table, string column, string whereStatement)
        {
            string text = "";
            switch (type)
            {
                case "S":
                    text += "SELECT " + column + " FROM " + table;
                    break;
                case "SD":
                    text += "SELECT DISTINCT " + column + " FROM " + table;
                    break;
            }
            text = WhereCheck(text, whereStatement);
            return text;
        }
        private string UpdateCommand(string table, string column, string inputData, string whereStatement)
        {
            string text = "";
            text = "UPDATE " + table + " SET " + column + " = " + "'" + inputData + "'";
            text = WhereCheck(text, whereStatement);
            return text;
        }
        private string InsertCommand(string table, string[] columns, string[] inputDatas)
        {
            string command = "INSERT INTO " + table + " (";
            for (int i = 1; i < columns.Length - 1; i++)
            {
                if (i != columns.Length - 2)
                {
                    command += columns[i] + ", ";
                }
                else
                {
                    command += columns[i];
                }
            }
            command += ") VALUES (";
            for (int i = 0; i < inputDatas.Length; i++)
            {
                if (i != inputDatas.Length - 1)
                {
                    command += inputDatas[i] + ", ";
                }
                else
                {
                    command += inputDatas[i];
                }
            }
            command += ")";
            return command;
        }
        private string DeleteCommand(string table, string whereStatement)
        {
            string text = "DELETE FROM " + table;
            text = WhereCheck(text, whereStatement);
            return text;
        }
        public string[] Select(string type, string table, string column, string whereStatement)
        {
            string data = "";
            string[] datas;
            command.CommandText = SelectCommand(type, table, column, whereStatement);
            OpenConnection();
            MySqlDataReader dataReader = command.ExecuteReader();

            while (dataReader.Read())
            {
                data += dataReader[column].ToString() + " ";
            }
            datas = data.Split(' ');
            CloseConnection();
            return datas;
        }
        public void Update(string table, string columns, string inputDatas, string whereStatement)
        {
            command.CommandText = UpdateCommand(table, columns, inputDatas, whereStatement);
            OpenConnection();
            command.ExecuteNonQuery();
            CloseConnection();
        }
        public void Insert(string table, string[] columns, string[] inputDatas)
        {
            command.CommandText = InsertCommand(table, columns, inputDatas);
            OpenConnection();
            command.ExecuteNonQuery();
            CloseConnection();
        }
        public void Delete(string table, string whereStatement)
        {
            command.CommandText = DeleteCommand(table, whereStatement);

            OpenConnection();
            command.ExecuteNonQuery();
            CloseConnection();
        }
    }
    public class InformationSchema : DatabaseConnectors
    {
        public InformationSchema() : base("information_schema") { }
        public string[] GetTable()
        {
            string[] tables = new string[5];
            tables = Select("SD", "COLUMNS", "TABLE_NAME", "TABLE_SCHEMA = 'green_ict_application'");
            return tables;
        }
        public string[] GetColumn(string table)
        {
            string[] columns;
            columns = Select("S" ,"COLUMNS", "COLUMN_NAME", "TABLE_NAME = '" + table + "'");
            return columns;
        }
    }
    public class Person
    {
        protected int userID;

        public Person(int ID)
        {
            userID = ID;
        }
    }
    public class User : Person
    {
        public User(int ID) : base(ID) { }

        public void UpdateProfile(string userName, string userPassword, string realName)
        {
            Global.database.Update("user_table", "user_name", userName, "user_id = " + userID);
            Global.database.Update("user_table", "user_password", userPassword, "user_table_id = " + userPassword);
            Global.database.Update("user_table", "real_name", realName, "user_table_id = " + realName);
        }
    }
    public class ServicePerson : Person
    {
        public ServicePerson(int ID) : base(ID) { }
        public void ChoosePlace()
        {
            
        }
        public void AddPlaceAndRoom(string place, string room)
        {
            string[] array = new string[] {userID.ToString(), place, room};
            Global.database.Insert("appointment_place", Global.informationSchema.GetColumn("appointment_place"), array);
        }
    }
    public static class Program
    {  
        static void OutputArray(string[] array)
        {
            for (int i = 0; i < array.Length; i++)
            {
                Console.WriteLine(array[i]);
            }
        }
        static string[] ShowServicePerson()
        {
            return Global.database.Select("SD", "user_table", "user_name", "role = 'Service Person'");
        }
        static string[] ShowPlace()
        {
            return Global.database.Select("SD", "appointment_place", "appointment_place", null);
        }
        static string[] ShowRoom(string appointmentPlace)
        {
            return Global.database.Select("SD", "appointment_place", "appointment_room", "appointment_place = " + appointmentPlace);
        }
        static void Main(string[] args)
        {
            string[] tables = new string[5];
            string[] id = new string[100];
            
            OutputArray(Global.informationSchema.GetColumn("appointment"));
            Console.ReadLine();

            //Console.WriteLine(informationSchema.UpdateCommand("user", "username", "nguyenTran", "user_id = 2"));
            //string[] columns = informationSchema.GetColumn("appointment_product");
            //string[] inputDatas = new string[] {"2", "Exchange meeting", "30", "4"};
            //Console.WriteLine(informationSchema.InsertCommand("appointment_product", columns, inputDatas));
            //Console.ReadLine();
        }
    }
}

<Page x:Class="WpfApp1.Page3"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:WpfApp1"
      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      xmlns:Controls="http://metro.mahapps.com/winfx/xaml/controls"
      xmlns:HamburgerMenu="clr-namespace:HamburgerMenu;assembly=HamburgerMenu"
      mc:Ignorable="d"
      Title="Page3" Background="#F8F0FB" Height="610" Width="995">

    <Grid RenderTransformOrigin="0.495,0.521">
        <Grid.RenderTransform>
            <TransformGroup>
                <ScaleTransform ScaleY="1" ScaleX="1"/>
                <SkewTransform AngleY="0" AngleX="0"/>
                <RotateTransform Angle="0"/>
                <TranslateTransform/>
            </TransformGroup>
        </Grid.RenderTransform>
        <Grid.RowDefinitions>

            <RowDefinition Height="29*"/>
            <RowDefinition Height="276*"/>

        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="64*"/>
            <ColumnDefinition Width="263*"/>
        </Grid.ColumnDefinitions>
        <Image Margin="50,0,-107,-96" Source="isaac-benhesed-249427.jpg" Stretch="Fill" Grid.ColumnSpan="2" Grid.Row="1"/>


        <Label Content="Duration:" Grid.Column="1" HorizontalAlignment="Left" Margin="109,315,0,0" Grid.Row="1" VerticalAlignment="Top" Height="42" Width="98"/>


        <materialDesign:ColorZone
	Padding="16"
	Mode="PrimaryDark" Grid.ColumnSpan="2" Height="58">
            <DockPanel >
                <materialDesign:PopupBox DockPanel.Dock="Right" PlacementMode="BottomAndAlignRightEdges">
                    <ListBox>
                        <ListBoxItem Content="Hello World"/>
                        <ListBoxItem Content="Nice Popup"/>
                        <ListBoxItem Content="Goodbye."/>
                    </ListBox>
                </materialDesign:PopupBox>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Margin="430,0,0,0" VerticalAlignment="Center"><Run Text="Booking office"/></TextBlock>
                </StackPanel>
            </DockPanel>
        </materialDesign:ColorZone>
        <HamburgerMenu:HamburgerMenu Background="#FF616161" MenuIconColor="White" SelectionIndicatorColor="White" MenuItemForeground="White" HorizontalAlignment="Left"/>
        <Label Content="Place:&#xA;" Grid.Column="1" HorizontalAlignment="Left" Margin="109,248,0,0" Grid.Row="1" VerticalAlignment="Top" Height="42" Width="98"/>
        <Label Content="Catalog:" Grid.Column="1" HorizontalAlignment="Left" Margin="109,174,0,0" Grid.Row="1" VerticalAlignment="Top" Height="42" Width="98"/>
        <Label Content="Service person:" Grid.Column="1" HorizontalAlignment="Left" Margin="109,108,0,0" Grid.Row="1" VerticalAlignment="Top" Height="42" Width="98"/>
        <HamburgerMenu:HamburgerMenu Background="#FF616161" MenuIconColor="White" SelectionIndicatorColor="White" MenuItemForeground="White" HorizontalAlignment="Left" Grid.RowSpan="2">
            <HamburgerMenu:HamburgerMenuItem  Text="Home" SelectionCommand="{Binding ElementName=this_}" Selected="HamburgerMenuItem_Selected_1"/>
            <HamburgerMenu:HamburgerMenuItem  Text="My appointment" Selected="HamburgerMenuItem_Selected"/>
            <HamburgerMenu:HamburgerMenuItem  Text="Likes"/>
            <HamburgerMenu:HamburgerMenuItem  Text="Lists"/>
            <HamburgerMenu:HamburgerMenuItem  Text="Profile"/>
        </HamburgerMenu:HamburgerMenu>
        <Label x:Name="durationLabel" Content="" Grid.Column="1" HorizontalAlignment="Left" Margin="233,315,0,0" Grid.Row="1" VerticalAlignment="Top" Height="28" Width="120" RenderTransformOrigin="0.5,0.5"/>

        <Grid/>
        <Frame x:Name="clientFrame" Content="Frame" HorizontalAlignment="Left" Height="552" Margin="50,0,0,0" Grid.Row="1" VerticalAlignment="Top" Width="945" Grid.ColumnSpan="2" />
        <ComboBox ItemsSource="{Binding servicePerson}" x:Name="nameBox"
                materialDesign:HintAssist.Hint="Name"
                Style="{StaticResource MaterialDesignFloatingHintComboBox}" Grid.Column="1" Margin="233,102,389,412" Grid.Row="1"  DropDownOpened="namebox_opened" DropDownClosed="namebox_closed" Height="38" />
        <ComboBox x:Name="productBox" 
                materialDesign:HintAssist.Hint="Product"
                Style="{StaticResource MaterialDesignFloatingHintComboBox}" Grid.Column="1" Margin="233,168,389,346" Grid.Row="1" DropDownOpened="productBox_opened" DropDownClosed="productBox_closed" Height="38"/>
        <ComboBox x:Name="placeBox"
	        materialDesign:HintAssist.Hint="Place"
	        Style="{StaticResource MaterialDesignFloatingHintComboBox}" Grid.Column="1" Margin="233,242,389,272" Grid.Row="1" DropDownOpened="placeBox_opened" DropDownClosed="placeBox_closed" Height="38"/>
        <Button x:Name="contiButton" Content="Continue" Grid.Column="1" HorizontalAlignment="Left" Margin="242,402,0,0" Grid.Row="1" VerticalAlignment="Top" Width="105"  Background="#FF303030" Foreground="#FFF8F0FB" BorderBrush="#FF303030"/>


    </Grid>

</Page>




// code

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using MySql.Data.MySqlClient;
using System.Collections;

namespace WpfApp1
{
    /// <summary>
    /// Interaction logic for Page3.xaml
    /// </summary>
    public partial class Page3 : Page
    {

        public Page3()
        {
            InitializeComponent();
        }
        public string selectedPerson;
        public string selectedService;
        public string selectedPlace;
        public string[] placeList;
        public string[] combinedList;
        public int placeID;
        public string[] servicePerson = Global.database.Select("S", "user_table", "real_name", "role = 'service'");
        public string[] GetProduct(string SelectedServicePerson)
        {
            string[] products = Global.database.Select("SD", "`appointment_product`, `user_table`", "appointment_product_name", "user_table.real_name = '" + SelectedServicePerson + "' AND user_table.user_table_id = appointment_product.ref_user_emp");
            return products;
        }
        public string[] GetPlace(string selectedPerson, string selectedProduct)
        {
            string[] column = { "appointment_place", "appointment_room" };
            string[] location = Global.database.Select("SD", "user_table, appointment_product, appointment_place", column, "appointment_product.appointment_product_name = '" + selectedProduct + "' AND user_table.real_name = '" + selectedPerson + "' AND user_table.user_table_id= appointment_place.ref_user_emp AND appointment_product.ref_user_emp =user_table.user_table_id");
            return location;
        }
        public void GetPlaceID()
        {
            int x = 0;
            while (x < placeList.Length)
            {
                if (selectedPlace.Contains(placeList[x]) && selectedPlace.Contains(placeList[x + 1]) == true)
                {
                    placeID = int.Parse(Global.database.SelectSingle("SD", "appointment_place", "appointment_place_id", "`appointment_place` = '" + placeList[x] + "' AND `appointment_room` ='" + placeList[x + 1] + "'"));
                    break;
                }
                x += 2;
            }
        }

        private void namebox_opened(object sender, EventArgs e)
        {
            nameBox.ItemsSource = servicePerson;
            /* for (int i = 0; i < servicePerson.Length; i++)
            {
                nameBox.Items.Add(servicePerson[i]);
            }
            */
        }

        private void namebox_closed(object sender, EventArgs e)
        {
            selectedPerson = nameBox.SelectedValue.ToString();
        }

        private void productBox_opened(object sender, EventArgs e)
        {
            string[] productList = GetProduct(selectedPerson);
            productBox.ItemsSource = productList;
        }
        private void productBox_closed(object sender, EventArgs e)
        {
            selectedService = productBox.SelectedValue.ToString();
        }

        private void placeBox_opened(object sender, EventArgs e)
        {
            placeList = GetPlace(selectedPerson, selectedService);
            combinedList = new string[placeList.Length / 2];
            int count = 0;
            for (int i = 0; i < combinedList.Length; i++)
            {
                combinedList[i] = placeList[i + count] + "_" + placeList[i + count + 1];
                count++;
            }
            placeBox.ItemsSource = combinedList;
        }

        private void placeBox_closed(object sender, EventArgs e)
        {
            selectedPlace = placeBox.SelectedValue.ToString();
            GetPlaceID();
            durationLabel.Content = Global.database.SelectSingle("SD", "appointment_product", "appoint_duration", "`appointment_product_name` = '" + selectedService + "' AND ref_appointment_place = '" + placeID.ToString() + "'");
        }

        private void HamburgerMenuItem_Selected(object sender, RoutedEventArgs e)
        {
            myappoiment appoinmentPage = new myappoiment();
            clientFrame.NavigationService.Navigate(appoinmentPage);
            nameBox.Visibility = Visibility.Collapsed;
            placeBox.Visibility = Visibility.Collapsed;
            productBox.Visibility = Visibility.Collapsed;
            contiButton.Visibility = Visibility.Collapsed;
        }

        private void HamburgerMenuItem_Selected_1(object sender, RoutedEventArgs e)
        {

        }


        //public string duration = Global.database.SelectSingle()

    }


}

